<!DOCTYPE html>
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-param" content="_csrf">
    <meta name="csrf-token" content="WENKQk9vWG8pGnp2F18pFy8sBHEgChBZCXUGAxs2Dlo3JQ81BT8XGQ==">
<title>AWS S3</title>
    <link href="http://dev.univrs.io/bootstrap.css" rel="stylesheet">
    <link href="http://dev.univrs.io/univrs.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=PT+Serif" rel="stylesheet">
 <style>
* {font-family: 'PT Serif', serif;}
.home-background {
    position: relative;
    width: 100%;
    height: 100%;
    background-repeat: no-repeat;
    background-position: center 120px;
    -webkit-background-size: cover;
    -moz-background-size: cover;
    -o-background-size: cover;
    background-size: cover;
    z-index: 1;
}
nav {
    box-shadow: 0 0 5px rgba(0,0,0,.2);
    background-color: white;
}
</style> 
 </head>
<body>
    
     <div class="wrap">
        <nav id="w0" class="navbar navbar-fixed-top" role="navigation">
        <div class="container"><div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#w0-collapse">
        <span class="sr-only">Toggle navigation</span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span></button>
<a class="navbar-brand" href="/"><strong>Home</strong></a></div>
<div id="w0-collapse" class="collapse navbar-collapse">
<ul id="w1" class="navbar-nav navbar-right nav">
<li><a href="/">Home</a></li>
<li><a href="/about">About</a></li>
<li><a href="/intro">Overview</a></li>
</ul></div></div></nav>
        <div class="container">
            <ul class="breadcrumb">
            <li><a href="/">Home</a></li>
            <li><a href="/about">About</a></li>
            <li><a href="/intro">Overview</a></li>
            <li><a href="/docker">Docker</a></li>
            <li class="active">ECS</li>
            <li><a href="/fargate">Fargate</a></li>
            <li><a href="/aws">Lambda</a></li>
            <li><a href="/s3">S3</a></li>
            <li><a href="/ml">ML</a></li>
            <li><a href="/gosdk">Go SDK</a></li>
            <li><a href="cf">CloudFormation</a></li>
            <li><a href="/ssm">SSM</a></li>
            <li><a href="/cert">Cert</a></li>
            <li><a href="/help">Help</a></li>
            </ul>            <!-- div class="home-background" style="background-image: url(&quot;img/univrs.JPG&quot;);" -->
            <div class="site-about">
    <!-- h1><? // Html::encode($this->title) ?></h1 -->
   <div class="jumbotron">
        <h1>AWS Container Service</h1>
        <h3>Amazon ECS (EC2 Container Service) provides Container Management Service in AWS without needing to own Cluster Management Infrastructure.</h3>
        <!-- p><a class="btn btn-lg btn-default" href="http://univrs.io:8888"></a></p -->
       <!-- p><a class="btn btn-default" href="http://www.tensorflow.org">Getting Started in TensorFlow</a></p -->
    </div>

    <div class="body-content">

        <!-- div class="row">
            <div class="col-lg-4">
              <h2><a class="btn btn-default" href="https://www.tensorflow.org/">documentation</a></h2>
                <p>Basic <a href="https://www.tensorflow.org/">TensorFlow</a>.</p>
            </div>
            <div class="col-lg-4">
              <h2><a class="btn btn-default" href="http://dev.univrs.io/index.html">Content with WebRTC Real-Time: Application</a></h2>
                <p>Web Real-Time Communications to communicate, collaborate, and create AI. (requires webrtc browser support)</p>
            </div>
            <div class="col-lg-4">
                <h2><a class="btn btn-default" href="http://en.wikipedia.org/wiki/Application_programming_interface">API &amp; extentions</a></h2>
                <p>In commputer programming, an application programming interface (API) is a set of routines, protocals, and 
                    tools for building software applications.</p>
            </div>
        </div -->
        
<!-- start new -->       

<h4>Amazon EKS</h4>
<p>Amazon EKS is a managed Kubernetes service in AWS. EKS manages 3 Kubernetes masters in 3 AZs and manages the software upgrades. It integrates with Elastic Loadbalancing, IAM and VPC.
EKS is in preview and will be GA in early 2018</p>
<h4><a href="/fargate">AWS Fargate</a></h4>
<p>AWS Fargate allows running containers without managing servers or clusters.</p>
<p>Fargate mode: Package containers, Specify your Container specs, IAM and Networking and AWS will manage the containers for you</p>
<p>Traditional ECS (and EKS) run in EC2 mode. Use ECS or EKS to manage a cluster of servers and schedule tasks. You will be responsible for managing server lifecycle.
The sections below have a comprehensive coverage of Traditional ECS. In the future, I will cover EKS and Fargate.</p>

<h4>Key facts and Glossary</h4>
<ul>
<li>Cost: Amazon ECS is free of cost and we only pay for the resources we use (EC2 instances/EBS Volumes etc..)
<li>Service Scope: ECS is a regional service that can be deployed across multiple availability zones within a VPC
<li>Containers: ECS supports Docker containers. Docker Containers contain everything that needs for an application to run including all dependencies like code, runtime, system tools and libraries.
<li>Image: Containers are created from a read-only template called Image. Images are typically built from a Dockerfile
<li>Registry: Images are stored in a Docker registry. You can use your own registry, or Docker Hub or AWS provided ECR (EC2 Container Service)
<li>Task Definitions: Task Definitions are blueprints that define what containers to use, their resource specifications like memory/cpu, the ports that need to be exposed, the volumes that will be used, permissions of containers using IAM role, networking details.
<li>Task: Task is the instantiation of Task Definition. Tasks can be run individually or as part of a Service Definition
<li>Cluster: ECS Cluster is a logical grouping of container instances. ECS downloads the container images into the EC2 instances and run the containers through Task Definitions
<li>Container Instances: Container Instances are EC2 instances that are part of ECS Cluster. These can be part of one or more ASGs and also be individual EC2 instances. Container Instances must be installed with Docker and ECS Agent or alternatively can use an ECS Optimized AMI from Amazon. Container instances must have the IAM role with ecsInstanceRole permissions. Container instances may not be relocated to a different cluster or you may not change the instance type.
<li>ECS Service: An ECS Service is a way to run a specific version of Task Definition with specified number of tasks and a deployment plan
<li>Container Agent: ECS Container agent is a docker container that runs in every ECS Container Instance. Container Agent syncs with ECS Service to run the tasks accurately and report status. Container Agents need an IAM role for ECS Container Instances to run with right permissions and also require connectivity to ECS API endpoints.
</ul>

<h2>ECS Capabilities</h2>
<h3>Scheduling Tasks</h3>
<ul>
<li>Tasks can be run manually using RunTask API</li>
<li>Tasks can be run in a schedule using CloudWatch events (like cron jobs)
<li>Custom schedulers like blox can be plugged in
<li>Tasks can be run using Services that allow configuration of a specific number of tasks to be run with a deployment configuration of how to update new versions. Check Services
</ul>

<h4>Task Placement Strategies</h3>
<p>When placing tasks, certain techniques can be applied to achieve desired results</p><ul>
<li><b>binpack</b> places tasks based on least amount of available CPU or Memory minimizing the number of container instances</li>
<li><b>random</b> places tasks randomly</li>
<li><b>spread</b> places tasks based on key:value pairs for example, you can spread by AZ and then by instanceId</li>
</ul>

<h4>Task Placement Constraints</h4>
<p>When placing tasks, certain constraints can be observed.</p>
<ul>
<li><b>distinctInstance: </b>Places each task in a different instance</li>
<li><b>memberOf:</b> Places a task based on an expression for example place only on t2 instances or a specific AMI. Refer to the link for details</li>
</ul>

<h4>Task level IAM permissions</h4>
<p>Each Task Definition can be associated with an IAM role for fine-grained permissions</p>

<h4>Task level Networking</h4><ul><li>
<b>bridge mode:</b> Take advantage of dynamic port mappings</li>
<li><b>host mode:</b> high performance, but container and host ports have to match, no dynamic ports</li>
<li><b>awsvpc mode:</b> Task will get an ENI and private IP. Security Groups can be associated with each Task Definition providing fine-grained security, The instance types will limit how many such tasks can be run due to ENI limits
</li></ul>

<h4>Data Volumes</h4>
<ul><li>
Using sourcePath attribute, containers can share a persistent volume</li>
<li>Using an empty host, containers can share a scratch volume that’s not persisted across task stop/start</li>
<li>You can mount a read-only volume (like docroot) across many containers</il>
<li>You can mount volumes from other containers in same Task Definition using volumesFrom</li>
</ul>

<h4>Service Load balancing</h4>
<ul><li>An ECS Service can be load balanced with ALB/NLB or ELB. Each Service can only be attached to 1 Loadbalancer</li>
<li><b>Application Loadbalancer(ALB):</b> Supports Application Layer (HTTP/HTTPS), Dynamic Ports, Path-based Routing, Priority rules and SSL Termination. No TCP load balancing</li>
<li><b>Network Loadbalancer(NLB):</b> Supports transport layer (TCP/SSL). High throughput. Supports dynamic ports</li>
<li><b>Classic Loadbalancer(ELB): </b>Supports both HTTP/HTTPS and TCP/SSL. Doesn’t support dynamic ports.</li>
<li>If a task fails health check, it will be killed</li>
</ul>

<h4>Service Autoscaling</h4><ul>
<li>Service Autoscaling adjusts desired count within the boundaries of Min/Max Capacity</li>
<li>Uses CloudWatch alarms to autoscale.</li>
<li>Both ECS metrics based CW alarms and Custom CW alarms can be used as triggers</li></ul>

<h4>Scaling Container Instances</h4><ul>
<li>If Container Instances are part of an ASG, they can be scaled using the ECS Console or by modifying the ASG desired</li>
<li>ASG can be configured with ECS based Reservation and Utilization alarms to configure scaling policies</li></ul>

<h4>Container Registry (ECR)</h4>
<p>Amazon ECR is a managed Docker registry service.</p>
<ul><li>ECR is account level Registry and regional service.</li>
<li>The EC2 Container Instance should have IAM permissions to access ECR</li>
<li>ECR only supports private images and needs authentication from an AWS account</li></ul>

<h4>Logging</h4>
<ul><li>ECS Container Agent logs can be shipped to CW logs.</li>
<li>The Container Instances will need appropriate IAM permissions</li>
<li>Container logs can be sent to CloudWatch using awslogs Log driver</li></ul>

<h4>Draining Container Instances</h4><p>
You can prevent scheduling tasks into Container Instance by changing its status to DRAINING using ECS Console or ECS API call. This capability can be used to do AMI updates
</p>

<h4>Remote Management of Container Instances</h4>
<ul><li>You can use EC2 System Manager to remotely perform tasks like Cleaning up Docker images, perform security updates, view logs etc...</li>
<li>Run Command will need appropriate IAM policy</li></ul>

<h4>Running Containers at startup time</h4>
<ul><li>Many time, we may need System containers that have to be run exactly once in every instance for e,g security/monitoring agents. Running them in startup scripts won’t give resource visibility to ECS.</li>
<li>You can run ECS managed tasks at start up by using a special User data section as described in this link. You will need runTask IAM policy for ecsInstanceRole to accomplish this
</li></ul>

<h4>Private Registry Authentication</h4>
<p>Private Docker registries can be authenticated as described here</p>

<h4>Image and task clean up</h4>
<p>Unused Images and finished tasks can be clean up using ECS agent settings as described here</p>

<h4>Access Container and Agent Metadata</h4>
<ul>
<li>The Container metadata can be accessed using an environment variable ECS_CONTAINER_METADATA_FILE. This can be used to query about various details of containers like Image, Port mappings
<li>ECS agent provides API access for introspection using http://localhost:51678/v1/metadata
</ul>

<h4>Proxy Configuration</h4>
<ul>
<li>Many corporates will be behind firewalls and will need Proxy configured</li>
<li>ECS Agent can be configured with HTTP Proxy as described in the line</li>
</ul>

<h4>ECS Available Metrics</h4>
<ul>
<li>CPUReservation</li>
<li>CPUReservation</li>
<li>CPUUtilization</li>
<li>CPUUtilization</li>
</ul>

<h4>CW Event integration</h4>
<p>ECS publishes events that can be used as triggers for CW events and can invoke Lambda functions as targets to take actions
</p>

<h2>Best Practices</h2>
<ul>
<li>Task Definitions should group containers with a common purpose. Arbitrarily grouping containers will make scheduling difficult</li>
<li>If ECS Agent is disconnected, make sure that you de-register the Container Instance to prevent corrupted state</li>
<li>Always stay up-to-date with ECS Container Agent versions</li>
<li>Validate your Docker version with ECS Container Agent version</li>
</ul>    
<!-- end new -->    

<div class="vertical-center">
  
	<div class="container well"><a href="/about">Next &gt;&gt;</a>
       <!-- b>Join the discussion:</b><br/>
	<ul id="messages" class="list-unstyled">
	
	</ul>
	<hr/>

	<form role="form" id="chat_form" onsubmit="sendMessage(); return false;">
		<div class="form-group">
		<input class="form-control" type="text" id="message" name="message"
		placeholder="Type your text here" value="" autofocus/>
		</div>
	<button type="button" id="send" class="btn btn-primary" onclick="sendMessage();">Send Message</button><button type="button" id="clear" class="btn btn-default" onclick="clearMessages(); return false;">Clear</button>
	</form -->
	</div><!-- end of vertial -->
	</div><!-- end container -->
</div>
           <!-- /div -->
        </div>
    </div>
    <footer class="footer">
        <div class="container">
            <p class="pull-left">&copy; univrs.io 2019</p>
            <p class="pull-right"><a href="https://github.com/ardeshir/">powered by open source</a></p>
        </div>
    </footer>

<script src="http://dev.univrs.io/jquery.js"></script>
<script src="http://dev.univrs.io/bootstrap.js"></script>
</body>
</html>
