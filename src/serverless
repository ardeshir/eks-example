<!DOCTYPE html>
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-param" content="_csrf">
    <meta name="csrf-token" content="WENKQk9vWG8pGnp2F18pFy8sBHEgChBZCXUGAxs2Dlo3JQ81BT8XGQ==">
<title>AWS Serverless</title>
    <link href="http://dev.univrs.io/bootstrap.css" rel="stylesheet">
    <link href="http://dev.univrs.io/univrs.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=PT+Serif" rel="stylesheet">
 <style>
* {font-family: 'PT Serif', serif;}
.home-background {
    position: relative;
    width: 100%;
    height: 100%;
    background-repeat: no-repeat;
    background-position: center 120px;
    -webkit-background-size: cover;
    -moz-background-size: cover;
    -o-background-size: cover;
    background-size: cover;
    z-index: 1;
}
nav {
    box-shadow: 0 0 5px rgba(0,0,0,.2);
    background-color: white;
}
</style> 
 </head>
<body>
    
     <div class="wrap">
        <nav id="w0" class="navbar navbar-fixed-top" role="navigation">
        <div class="container"><div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#w0-collapse">
        <span class="sr-only">Toggle navigation</span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span></button>
<a class="navbar-brand" href="/">
<strong>Home</strong></a></div>
<div id="w0-collapse" class="collapse navbar-collapse">
<ul id="w1" class="navbar-nav navbar-right nav">
<li><a href="/">Home</a></li>
<li><a href="/about">About</a></li>
<li><a href="/intro">Overview</a></li>
</ul></div></div></nav>
        <div class="container">
            <ul class="breadcrumb">
            <li><a href="/">Home</a></li>
                <li><a href="/about">About</a></li>
                <li><a href="/intro">Overview</a></li>
                <li><a href="/docker">Docker</a></li>
                <li><a href="/ecs">ECS</a></li>
                <li><a href="/aws">Lambda</a></li>
                <li><a href="/s3">S3</a></li>
                <li><a href="/ml">ML</a></li>
                <li><a href="/gosdk">Go SDK</a></li>
                <li><a href="/cf">CloudFormation</a></li>
                <li><a href="/ssm">SSM</a></li>
                <li class="active"> Serverless </li>
                 <li><a href="/cert">Cert</a></li>
                <li><a href="/help">Help</a></li>
            </ul>            <!-- div class="home-background" style="background-image: url(&quot;img/univrs.JPG&quot;);" -->
            <div class="site-about">
    <!-- h1><? // Html::encode($this->title) ?></h1 -->
   <div class="jumbotron">
        <h2>AWS Serverless: API + Lambda + CW + DynamoDB</h2>
        <!-- p><a class="btn btn-lg btn-default" href="http://univrs.io:8888"></a></p -->
       <!-- p><a class="btn btn-default" href="http://www.tensorflow.org">Getting Started in TensorFlow</a></p -->
    </div>

    <div class="body-content">

        <!-- div class="row">
            <div class="col-lg-4">
              <h2><a class="btn btn-default" href="https://www.tensorflow.org/">documentation</a></h2>
                <p>Basic <a href="https://www.tensorflow.org/">TensorFlow</a>.</p>
            </div>
            <div class="col-lg-4">
              <h2><a class="btn btn-default" href="http://dev.univrs.io/index.html">Content with WebRTC Real-Time: Application</a></h2>
                <p>Web Real-Time Communications to communicate, collaborate, and create AI. (requires webrtc browser support)</p>
            </div>
            <div class="col-lg-4">
                <h2><a class="btn btn-default" href="http://en.wikipedia.org/wiki/Application_programming_interface">API &amp; extentions</a></h2>
                <p>In commputer programming, an application programming interface (API) is a set of routines, protocals, and 
                    tools for building software applications.</p>
            </div>
        </div -->
        
<!-- start new --> 
<h4>View the state of instances with a Serverless tool</h2>
<p id="demo"></p>

<button type="submit" onclick="UserAction()">Show Sandbox Instances State</button>

<script>
function UserAction() {
  var myObj, x, txt = "";
  var xhttp = new XMLHttpRequest();
  
  xhttp.onreadystatechange = function() {
  if(this.readyState == 4 && this.status == 200) {
      myObj = JSON.parse(this.responseText);
      txt += "<div><table class='table table-striped'><thead><tr><th>ARN</th><th>State</th></thead>"
        for (x in myObj) {
           txt += "<tr><td>" + myObj[x].ARN + "</td><td>" + myObj[x].State + "</td></tr>";
        }
        txt += "</table></div>"
        document.getElementById("demo").innerHTML = txt;
     } 
  };
  
  xhttp.open("GET", "https://k2vmys3kma.execute-api.us-east-1.amazonaws.com/Production/ec2", true);
  xhttp.setRequestHeader("Content-type", "application/json");
  xhttp.send();
  // var response = JSON.parse(xhttp.responseText);
  
} // end of function
</script>

<h3>Lambda Scripts:</h3>

<h4>API Gateway</h4>
<pre>

https://k2vmys3kma.execute-api.us-east-1.amazonaws.com/Production/ec2

Request: /ec2
Status: 200
Latency: 408 ms

Response Body

  [ 
     {
    "State": "stopped",
    "ARN": "arn:aws:ec2:us-east-1:033374767009:instance/i-0256261306491a826"
    }
]

</pre>

<h4>PUT DATA INTO DYNAMO DB</h4>
<pre>

exports.handler = (event, context, callback) => {
    // TODO implement
    var AWS = require("aws-sdk");
    
    var docClient = new AWS.DynamoDB.DocumentClient();
    var table = "EC2Data"; 
    var ARN="" + event.resources;
    var state= event.detail.state;
    
    var params = {
        
        TableName: table, 
        Item: {
            "ARN": ARN,
            "State": state
        }
    };
    
    docClient.put(params, function(err, data) {
       if(err) {
            console.error("Unable to add item, Error JSON:", JSON.stringify(err, null));
       } else {
            console.log("Added item:", JSON.stringify(data, null, 2))
       }
    });
    
    // callback(null, 'Hello from Lambda');
};

</pre>

<h2>Second part: Read from DynamoDB</h2>
<pre>

var AWS = require('aws-sdk');
var dynamo = new AWS.DynamoDB.DocumentClient();

exports.handler = (event, context, callback) => {
    // TODO implement
    
    var params = {
       TableName: "EC2Data"  
    };
    
    var docClient = new AWS.DynamoDB.DocumentClient();
    
    var items = [];
    
    var scanExecute = function(callback) {
            
            docClient.scan(params, function(err, result) {
            
                 if(err) {
                     callback(err);
                 } else {
                  
                     items = items.concat(result.Items);
                     
                     if(result.LastEvaluatedKey) {
                         
                         params.ExclusiveStartKey = result.LastEvaluatedKey;
                         scanExecute(callback);
                         
                     } else {
                         callback(err,items);
                     }
                 }
            });
    }
    scanExecute(callback);
};
</pre>
<br/>
<h4>Handy stuff...</h4> 

<pre>
[root@lifetouch ~]# curl -s http://localhost:51678/v1/metadata | jq
[root@lifetouch ~]# curl -s 127.0.0.1:51678/v1/metadata | python -mjson.tool
No JSON object could be decoded
</pre>

<h2>tcpdump examples</h2>
<p><a href="https://www.jollyfrogs.com/kali-installation-guide/">source</a></p>
<pre>
tcpdump examples
Capture packets with host 20.20.20.20 and port 110 and write to file:

tcpdump -n 'host 20.20.20.20 and port 110' -w /tmp/capture.pcap
Capture ICMP ping requests

tcpdump -nni eth0 -e icmp[icmptype] == 8
Capture ICMP ping replies

tcpdump -nni eth0 -e icmp[icmptype] == 0
Capture packets with DSCP tags

tcpdump -nni eth1 -v 'ip[1] & 0xfc == 184'
Dump HTTP traffic in ASCII and HEX format

tcpdump -nni eth0 -s0 -AX -l port 80
Grab the user agent from the http header on port 9999

tcpdump -A -l -vvvs 1024 -npi eth0 port 9999
Show IP addresses in pcap file:

tcpdump -n -r capture.pcap | awk -F" " '{print $3}' | sort -u | head
Filter by source, destination or port:

tcpdump -n src host 10.10.10.10
tcpdump -n dst host 20.20.20.20
tcpdump -n port 80
Read pcap file in hex format:

tcpdump -nX -r capture.pcap
TCP flags are defined in the 14th byte and to filter flags, convert binary to decimal:
CRW  ECE  URG  ACK  PSH  RST  SYN  FIN
0        0       0       1       1       0       0       0     = 24 in decimal
So, decimal value of 24 will capture only ACK and PSH flagged packets

tcpdump -A -n 'tcp[13] = 24' -r capture.pcap

    
</pre>
<!-- end new -->    

<div class="vertical-center">
  
	<div class="container well"><a href="/about">Next &gt;&gt;</a>
       <!-- b>Join the discussion:</b><br/>
	<ul id="messages" class="list-unstyled">
	
	</ul>
	<hr/>

	<form role="form" id="chat_form" onsubmit="sendMessage(); return false;">
		<div class="form-group">
		<input class="form-control" type="text" id="message" name="message"
		placeholder="Type your text here" value="" autofocus/>
		</div>
	<button type="button" id="send" class="btn btn-primary" onclick="sendMessage();">Send Message</button><button type="button" id="clear" class="btn btn-default" onclick="clearMessages(); return false;">Clear</button>
	</form -->
	</div><!-- end of vertial -->
	</div><!-- end container -->
</div>
           <!-- /div -->
        </div>
    </div>
    <footer class="footer">
        <div class="container">
            <p class="pull-left">&copy; univrs.io 2019</p>
            <p class="pull-right"><a href="https://github.com/ardeshir/">powered by open source</a></p>
        </div>
    </footer>

<script src="http://dev.univrs.io/jquery.js"></script>
<script src="http://dev.univrs.io/bootstrap.js"></script>
</body>
</html>
