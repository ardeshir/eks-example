<!DOCTYPE html>
<head>
    <meta charset="UTF-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="csrf-param" content="_csrf">
    <meta name="csrf-token" content="WENKQk9vWG8pGnp2F18pFy8sBHEgChBZCXUGAxs2Dlo3JQ81BT8XGQ==">
<title>Teach Back @ U of M </title>
    <link href="http://dev.univrs.io/bootstrap.css" rel="stylesheet">
    <link href="http://dev.univrs.io/univrs.css" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css?family=PT+Serif" rel="stylesheet">
 <style>
* {font-family: 'PT Serif', serif;}
.home-background {
    position: relative;
    width: 100%;
    height: 100%;
    background-repeat: no-repeat;
    background-position: center 120px;
    -webkit-background-size: cover;
    -moz-background-size: cover;
    -o-background-size: cover;
    background-size: cover;
    z-index: 1;
}
.nav {
    box-shadow: 0 0 5px rgba(0,0,0,.2);
    background-color: white;
}
</style> 

<script src="https://unpkg.com/lodash@4.16.6"></script>
</head>
<body>
    
     <div class="wrap">
        <nav id="w0" class="navbar navbar-fixed-top" role="navigation">
        <div class="container"><div class="navbar-header">
        <button type="button" class="navbar-toggle" data-toggle="collapse" data-target="#w0-collapse">
        <span class="sr-only">Toggle navigation</span>
<span class="icon-bar"></span>
<span class="icon-bar"></span>
<span class="icon-bar"></span></button>
<a class="navbar-brand" href="/">
<strong>Home</strong></a></div>
<div id="w0-collapse" class="collapse navbar-collapse">
<ul id="w1" class="navbar-nav navbar-right nav">
<li><a href="/">Home</a></li>
<li><a href="/about">About</a></li>
<li><a href="/intro">Overview</a></li>
</ul></div></div></nav>
        <div class="container">
            <ul class="breadcrumb">
            <li><a href="/">Home</a></li>
                <li><a href="/about">About</a></li>
                <li><a href="/intro">Overview</a></li>
                <li><a href="/docker">Docker</a></li>
                <li><a href="/ecs">ECS</a></li>
                 <li><a href="/fargate">Fargate</a></li>
                <li><a href="/aws">Lambda</a></li>
                <li><a href="/s3">S3</a></li>
                <li><a href="/ml">ML</a></li>
                <li><a href="/gosdk">Go SDK</a></li>
                <li><a href="/cf">CloudFormation</a></li>
                <li><a href="/ssm">SSM</a></li>
                <li class="active">Teach Back</li>
                 <li><a href="/cert">Cert</a></li>
                <li><a href="/help">Help</a></li>
            </ul>            <!-- div class="home-background" style="background-image: url(&quot;img/univrs.JPG&quot;);" -->
            <div class="site-about">
    <!-- h1><? // Html::encode($this->title) ?></h1 -->
   <div class="jumbotron">
        <h2>11.1 Lesson Plan - Hard Hat Zone: Constructors At Work</h2>
           <hr/>
   </div>

    <div class="body-content">
<!-- start new -->  
<h3>Overview</h3>
<p>
    In this class we will be introducing students to the usage of JavaScript constructors and how they can be used to dynamically create
    objects with similar schemas.
</p>
<h5>Summary: Complete actvities 1-4 in Unit 11</h5>
<h4>Activities</h4>
<ul>
   <li><a href="Activities/01-RainingCatsAndDogs-NoCon/rainingCatsAndDogs-noCon.js">01-RainingCatsAndDogs-NoCon / rainingCatsAndDogs-NoCon.js</a></a></li>
   <li><a href="Activities/02-RainingCatsAndDogs-Con/rainingCatsAndDogs-con.js">02-RainingCatsAndDogs-Con / rainingCatsAndDogs-Con.js</a></li>
   <li><a href="Activities/03-CharacterCreate/characterCreate-withRPG.js">03-CharacterCreate / characterCreate-withRPG.js</a></li>
   <li><a href="Activities/03-CharacterCreate/characterCreate.js">03-CharacterCreate / characterCreate.js</a></li>
   <li><a href="Activities/04-Tamagotchi/tamagotchi-this.js">04-Tamagotchi / tamagotchi-this.js</a></li>
   <li><a href="Activities/04-Tamagotchi/tamagotchi.js">04-Tamagotchi / tamagotchi.js</a></li>
   <li>Instructor Notes:</li>
   <li><a href="lesson_plan.pdf">Lesson Plan (pdf)</a></li>
   <li><a href="Syllabus.pdf">Syllabus (pdf)</a></li>
   <li><a href="time_tracker.pdf">Time Tracker (pdf)</a> | <a href="http://ardeshir.org/learnjs/"> Alarm Clock!</a></li>
</ul>

<h4>Instructor Priorities</h4>
<ul>
    <li>Reintroduce students to the basics of JavaScript Objects (properties and methods)</li>
    <li>Students should understand how to create a basic JavaScript constructor</li>
    <li>Students should be able to use constructors and user input to dynamically create objects</li>
</ul>
<h4>Instructor's Notes</h4>
<ul>
    <li>This class is a really fun and relaxed one! Constructors are extremely useful in creating objects of similar types and 
    allow for the development of very interesting applications. So long as your students have a firm 
    understanding of how objects function, they should find today's lesson and activities very enjoyable.</li>
    
    <li>At the beginning of the class, make sure to go over the basics of objects once again so as to help your students recall how
    they are created and used. This will ultimately help them in understanding constructors better.</li>
    
    <li>If you have time at the end of class, feel free to go over JavaScript prototypes as well. They are very similar to 
    constructors in their usage, but operate a little differently.</li>
</ul>

<h3>Class Objectives</h3>
<ul>
    <li>To master the basics of JavaScript objects.</li>
    <li>To create basic JavaScript constructors for usage in Node applications</li>
    <li>To create a simple Node application which uses methods contained within a constructed object.</li>
</ul>

<h3>1. Instructor Do: Welcome Class (5 mins)</h3>
<ul>
    <li>Welcome your students to class and tell them that today we will be revisiting objects and building upon our past
    knowledge of them to create more dynamic object-oriented applications.</li>
    <li>Before diving into the new material, however, we have a small activity for them to work through beforehand to reintroduce them to objects.</li>
</ul>

<h3><a href="one">2. Students Do: Raining Cats and Dogs (15 mins) </a></h3>
<ul>
    <li>Slack out the following instructions</li>
</ul>
<h5>Instructions</h5>
<ul><li>Make a dog object with three keys...</li>
    <ul>
        <li>First key called "raining" with a value true</li>
        <li>Second key called "noise" with a value of "Woof!"</li>
        <li>Third key called "makeNoise" which contains a function which console.logs noice to the screen if it is raining dogs.</li>
    </ul>
</ul>
<br/>
<pre>
<b> // creates an object and sets it to "dogs"</b>
var dogs = {
  // creates the property "raining" and sets it to true
  raining: true,
  // creates the property "noise" and sets it to "Woof!"
  noise: "Woof!",
  // creates the method "makeNoise", which when called, prints dogs.noise if .raining is true
  makeNoise: function() {
  // the 'this' keyword refers to the object it's called from
  // i.e. this.raining refers to the raining property of 'this' particular object
    if (this.raining === true) {
      console.log(this.noise);
    }
  }
};
</pre>
 <ul>   
<li> Make a Cat object with three keys....</li>

        <ul>
            <li>First key called "raining" with a value of false</li>
            <li>Second key called noise with the value of "Meow!"</li>
            <li>Third key called "makeNoise" which contains a function which console.logs the noise to the screen if it is raining cats</li>
        </ul>
</ul>
<br/>
<pre>
<b>// creates an object with a similar layout to "dogs" and sets it to "cats"</b>

var cats = {
  raining: false,
  noise: "Meow!",
  makeNoise: function() {
    if (this.raining === true) {
      console.log(this.noise);
    }
  }
};

</pre>
<br/>
<pre>
<b>// Call the "makeNoise" methods for both objects</b>
dogs.makeNoise();
cats.raining = true;
cats.makeNoise();
</pre>

<h5>BONUS: Create a function called "massHysteria" which takes in both the cats and the dogs object and prints 
"DOGS AND CATS LIVING TOGETHER! MASS HYSTERIA!" if both of the raining keys are equal to true.</h5>
<pre>
<b>
// creates a function called "massHysteria" which takes in both objects and
// prints a message to the screen if ".raining" is true for both of them </b>

var massHysteria = function(dogs, cats) {
  if (dogs.raining === true && cats.raining === true) {
    console.log("DOGS AND CATS LIVING TOGETHER! MASS HYSTERIA!");
  }
};

massHysteria(dogs, cats);    
</pre>
</ul>
<h4>output> node 01-rainingCatsAndDogs-noCon.js</h4>
<pre>
Woof!
Meow!
DOGS AND CATS LIVING TOGETHER! MASS HYSTERIA!  
</pre>
<h4>3. How can we improve this code?</h4>
<b><ul>
    <li>Anything in this code seems redundant upon further examination?<br/>
       <ul>
           <li>The cats and dogs objects have the same keys and the same overall layout.</li>
           <li>The only thing that differs between the two is the data contained within their keys.</li>
       </ul>
    </li>
    <li>Ask your students if any of them came up with a foolproof way to get rid of this redundancy <br/>
         <ul>
             <li>Answer... JavaScript Constructors!</li>
         </ul>
    </li>
</ul></b>
<h3><a href="two">4. Instructor Do: Cats and Dogs, Constructed Together using a constructor function to build the objects</a></h3>
<pre>
// constructor which can be used to create objects with the ".raining", ".noise",
// and ".makenoise" properties
function Animal(raining, noise) {
  this.raining = raining;
  this.noise = noise;
  this.makeNoise = function() {
    if (this.raining === true) {
      console.log(this.noise);
    }
  };
}

// sets the variables "dogs" and "cats" to be animal objects and initializes them with raining and noise properties
var dogs = new Animal(true, "Woof!");
var cats = new Animal(false, "Meow!");

// calling dogs and cats makeNoise methods
dogs.makeNoise();
cats.makeNoise();

// if we want, we can change an objects properties after they're created
cats.raining = true;
cats.makeNoise();

var massHysteria = function(dogs, cats) {
  if (dogs.raining === true && cats.raining === true) {
    console.log("DOGS AND CATS LIVING TOGETHER! MASS HYSTERIA!");
  }
};

massHysteria(dogs, cats);    
</pre>
<h4>output>  node 02-rainingCatsAndDogs-Con.js</h4>
<pre>
Woof!
Meow!
DOGS AND CATS LIVING TOGETHER! MASS HYSTERIA!  
</pre>

<h3><a href="three">5. Students Do: Character Creation (30 mins)</a></h3>
<ul>
    <li>Each character created using your constructor should have the following properties...
      <ul>
          <li>Name: The character's name ‑‑> String</li>
<li>Profession: What the character does for a living ‑‑> String</li>
<li>Gender: The character's gender ‑‑> String</li>
<li>Age: The character's age ‑‑> Integer</li>
<li>Strength: Abstraction for how strong the character is ‑‑> Integer</li>
<li>HitPoints (HP): Abstraction for how much health the character has ‑‑> Integer</li>
<li>PrintStats: Function which prints all of a character's properties to the screen</li>
      </ul>
    </li>
</ul>
<pre>
// constructor function which can take in a series of values and create objects
// with the properties contained inside
function Character(name, profession, gender, age, strength, hitpoints) {
  this.name = name;
  this.profession = profession;
  this.gender = gender;
  this.age = age;
  this.strength = strength;
  this.hitpoints = hitpoints;

  // method which prints all of the stats for a character
  this.printStats = function() {
    console.log("Name: " + this.name + "\nProfession: " + this.profession +
    "\nGender: " + this.gender + "\nAge: " + this.age + "\nStrength: " +
    this.strength + "\nHitPoints: " + this.hitpoints);
    console.log("\n-------------\n");
  };
  // method which determines whether or not a character's "hitpoints" are less then zero
  // and returns true or false depending upon the outcome
  this.isAlive = function() {
    if (this.hitpoints > 0) {
      console.log(this.name + " is still alive!");
      console.log("\n-------------\n");
      return true;
    }
    console.log(this.name + " has died!");
    return false;
  };

  // method which takes in a second object and decreases their "hitpoints" by this character's strength
  this.attack = function(character2) {
    character2.hitpoints -= this.strength;
  };

  // method which increases this character's stats when called
  this.levelUp = function() {
    this.age += 1;
    this.strength += 5;
    this.hitpoints += 25;
  };
}

// creates two unique characters using the "character" constructor
var warrior = new Character("Crusher", "Warrior", "Male", 25, 10, 75);
var rogue = new Character("Dodger", "Rogue", "Female", 23, 20, 50);

warrior.printStats();
rogue.printStats();

rogue.attack(warrior);
warrior.printStats();
warrior.isAlive();

</pre>
<h4>Once you have created your constructor, create two new characters and print their properties to the screen</h4>
<p><b>Now that you feel comfortable with your constructor, it is time to start making this character creation system
a little more reactive by adding in some more methods...</b>
</p>
<ul>
<li>IsAlive: Function which prints whether or not this character is alive by looking into their hitpoints and
determining whether they are above or below zero.</li>
<li>Attack: Function which takes in a second character's hitpoints and subtracts this character's strength
from it.</li>
<li>LevelUp: Function which increases this character's Age by 1, their Strength by 5, and their HitPoints by
25.</li>
</ul>
<h4>output> node 03-characterCreate-withRPG.js</h4>
<pre>
Name: Crusher
Profession: Warrior
Gender: Male
Age: 25
Strength: 10
HitPoints: 75

-------------

Name: Dodger
Profession: Rogue
Gender: Female
Age: 23
Strength: 20
HitPoints: 50

-------------

Name: Crusher
Profession: Warrior
Gender: Male
Age: 25
Strength: 10
HitPoints: 55

-------------

Crusher is still alive!

-------------

Name: Dodger
Profession: Rogue
Gender: Female
Age: 24
Strength: 25
HitPoints: 75

-------------    
</pre>

<h2> <a href="four">Students Do: Tamagotchi Time (40 mins)</a></h2>
<b>
See if there are any questions and then slack out the following activity
<b/>
<h3>Instructions</h3>
<p>Remember Tamagotchis? They were those little toys that contained "digital pets" which you could feed, pet,
play with, and care for. Kind of like Furbies but a whole lot less terrifying. Over the next thirty minutes or so,
you are going to create your own basic Tamagotchi clone using constructors.
Create a constructor called "DigitalPal" which will create four properties and four methods...</p>
<ul>
<li>The first property is "hungry" and it initially starts out as false</li>
<li>The second property is "sleepy" and it initially starts out as false</li>
<li>The third property is "bored" and it initially starts out as true</li>
<li>The fourth property is "age" and it initially starts out at 0</li>
<li>The first method is "feed()" ‑ If hungry is true, print "That was yummy!", set hungry to false, and then set</li>
<li>sleepy to true. If hungry is false, print "No thanks! I'm full."</li>
<li>The second method is "sleep()" ‑ If sleepy is true, print "Zzzzzzzz", set sleepy to false, then set bored to</li>
<li>true, and then run increaseAge(). If sleepy is false, print "No way! I'm not tired."</li>
<li>The third method is "play()" ‑ If bored is true, print "Yay! Let's play!", set bored to false, and then set</li>
<li>hungry to true. If bored is false, print "Not right now. Later?"</li>
<li>The fourth method is "increaseAge()" ‑ This method runs within the sleepy() method when the DigitalPal
goes to sleep and increases the DigitalPal's age by one while also printing "Happy Birthday to me! I am
"+age+" old!"</li>
</ul>
<b>Create a variable named "Dog" that is set to a new DigitalPal before adding the following unique
properties/methods to it...</b>
<ul>
<li>Outside ‑ Initially set to false</li>
<li>Bark() ‑ Prints out "Woof! Woof!" when run</li>
<li>goOutside() ‑ If outside is false, prints "Yay! I love the outdoors!", sets outside to true, and runs Bark(). If
outside is true, prints "We're already outside though..."</li>
<li>goInside() ‑ If outside is true, prints "Do we have to? Fine..." and sets outside to false. If outside is false,
prints "I'm already inside..."</li>
</ul>
</p>
Make a second variable named "Cat" that is set to a new DigitalPal and add the following methods to it:</p>
<ul>
<li>HouseCondition ‑ Initially set to 100... But not for long...</li>
<li>meow() ‑ prints out "Meow! Meow!" when run</li>
<li>destroyFurniture() ‑ Lowers HouseCondition by 10 and prints "MUAHAHAHAHA! TAKE THAT</li>
FURNITURE!" to the screen. Also sets bored to false and sleepy to true. If HouseCondition is equal to 0,
then this should not run anymore.</li>
<li>buyNewFurniture() ‑ Raises HouseCondition by 50 and prints "Are you sure about that?" to the screen.</li>
<li>Play around with your newly created digital pets for a bit and see what else you could add in order to make</li>
them even more exciting!</li>
</ul>

<h4>node 04-tamagotchi.js</h4>
<p>output :  <br/>
<b>MUAHAHAHAHA! TAKE THAT FURNITURE!</b>
</p>

<!-- end new -->    
  <div class="vertical-center">
	<div class="container well"><a href="one"> &lt;&lt; Start</a>  | <a href="two">Next &gt;&gt;</a>
	</div><!-- end of vertial -->
	</div><!-- end container -->
</div>
           <!-- /div -->
        </div>
    </div>
    <footer class="footer">
        <div class="container">
            <p class="pull-left">&copy; univrs.io 2018</p>
            <p class="pull-right"><a href="https://github.com/ardeshir/">powered by open source</a></p>
        </div>
    </footer>
<script src="../module.js"></script>
<script src="http://dev.univrs.io/jquery.js"></script>
<script src="http://dev.univrs.io/bootstrap.js"></script>
</body>
</html>
